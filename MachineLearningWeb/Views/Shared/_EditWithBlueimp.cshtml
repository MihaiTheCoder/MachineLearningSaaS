@model MachineLearningWeb.Models.MLProject

@{
    ViewData["Title"] = "Edit";
    var projectId = Model.ID;
}
@section AddToHead{
    <link href="@Url.Content("~/blueimp-gallery/css/blueimp-gallery.css")" rel="stylesheet" type="text/css" />
}

<h2>Edit</h2>

<h4>MLProject</h4>
<hr />
<a asp-area="" asp-controller="MLProjects" asp-action="Index">Home</a>
<a asp-area="" asp-controller="MLProjects" asp-action="CreateImageModels" asp-route-id="@projectId">Upload Images</a>
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ID" />
            <div class="form-group">
                <label asp-for="ProjectName" class="control-label"></label>
                <input asp-for="ProjectName" class="form-control" />
                <span asp-validation-for="ProjectName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ProjectType" class="control-label"></label>
                @Html.DisplayFor(model => model.ProjectType)
                <span asp-validation-for="ProjectType" class="text-danger"></span>
            </div>
            <div id="blueimp-gallery" class="blueimp-gallery">
                <div class="slides"></div>
                <h3 class="title"></h3>
                <a class="prev">‹</a>
                <a class="next">›</a>
                <a class="close">×</a>
                <a class="play-pause"></a>
                <ol class="indicator"></ol>
            </div>
            <div id="links">
                @foreach (var item in Model.Images)
                {
                    <a href="@Url.Action("Images","MLProjects",new { imageModelId = item.ID })" title="@item.FileName">
                        <img src="@Url.Action("Thumb","MLProjects",new { imageModelId = item.ID })" alt="@item.FileName" />
                    </a>
                }
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
            <div id="tag-region-popup" class="popup-body no-focus-outline" tabindex="-1" style="height:6em; width:16em;">
                <div class="popup-controls">
                    <button id="delete-region" class="delete-button" aria-label="delete region" title="delete region">
                        <i class="glyphicon glyphicon-trash">
                        </i>
                    </button>
                    <button id="duplicate-region" class="duplicate-button" aria-label="duplicate region" title="duplicate region">
                        <i class="glyphicon glyphicon-duplicate">

                        </i>
                    </button>
                    <button id="close-region" class="close-button" aria-label="complete editing" title="complete editing">
                        <i class="glyphicon glyphicon-remove">

                        </i>
                    </button>
                </div>
                <div class="input-group">
                    <div style="position:relative">
                        <div class="autocomplete" style="width:13em;">
                            <input id="region-name-input" type="text" name="region-name" placeholder="Region Name" list="object-tags" style="height:2.3em" />
                            <datalist id="object-tags">
                                <option>El ciupos</option>Trebuie adaugate tags pe proiect, si apoi puse aici, aici trebuie sa adaugam si din javascript, sa nu ne trebuiasca refresh
                            </datalist>
                        </div>
                    </div>
                    <div class="input-group-btn">
                        <button class="btn btn-default" aria-label="tag region" title="tag region" type="submit">
                            <i class="glyphicon glyphicon-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div id="selected-region" class="selected-region" style="display:none">
                <span class="movable-region top-left"></span>
                <span class="movable-region top-right"></span>
                <span class="movable-region bottom-left"></span>
                <span class="movable-region bottom-right"></span>
                <span class="movable-region top-edge"></span>
                <span class="movable-region bottom-edge"></span>
                <span class="movable-region left-edge"></span>
                <span class="movable-region right-edge"></span>
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="@Url.Content("~/blueimp-gallery/js/blueimp-gallery.js")"></script>
    <script>
        regionPopup = document.getElementById('tag-region-popup');
        selectedRegion = document.getElementById('selected-region');
        document.getElementById('links').onclick = function (event) {
            event = event || window.event;
            var target = event.target || event.srcElement,
                link = target.src ? target.parentNode : target,
                links = this.getElementsByTagName('a');
            blueimp.Gallery(links, {
                index: link,
                event: event,
                onslide: function (index, slide) {
                    // Callback function executed on slide change.
                    console.log(`index:${index}, slide:${slide}`);
                    initDraw(slide, function (left, top, width, height) {
                        regionPopup.style.zIndex = 9999999;
                        regionPopup.style.display = 'block'
                        regionPopup.style.left = (left - regionPopup.getBoundingClientRect().width) + "px";
                        regionPopup.style.top = top + "px";
                        slide.appendChild(regionPopup);
                    });
                },
                onslideend: function (index, slide) {
                    regionPopup.style.display = 'none';
                    selectedRegion.style.display = 'none';
                }
            });
        }

        function initDraw(canvas, onDone) {
            function setMousePosition(e) {
                var ev = e || window.event;
                if (ev.pageX) { //Moz
                    mouse.x = ev.pageX + window.pageXOffset;
                    mouse.y = ev.pageY + window.pageYOffset;
                } else if (ev.clientX) { //IE
                    mouse.x = ev.clientX + document.body.scrollLeft;
                    mouse.y = ev.clientY + document.body.scrollTop;
                }
            }
            var mouse = {
                x: 0,
                y: 0,
                startX: 0,
                startY: 0
            };
            var element = null;

            var width = 0, height = 0, left = 0, top = 0;
            var movableRegion = '';
            var isStartEdit = false;

            $('.movable-region').click(function () {
                movableRegion = this.getAttribute('class');
                element = this.parentNode.parentNode;
            });

            function isInitialSelection() {
                return movableRegion == '';
            }

            function shouldMoveWidth() {
                return isInitialSelection() || movableRegion.includes('right');
            }

            function shouldMoveHeight() {
                return isInitialSelection() || movableRegion.includes('bottom');
            }

            function shouldMoveLeft() {
                return movableRegion.includes('left');
            }

            function shouldMoveTop() {
                return movableRegion.includes('top');
            }

            canvas.onmousemove = function (e) {
                setMousePosition(e);
                if (element == null)
                    return;


                if (isInitialSelection()) {
                    left = (mouse.x - mouse.startX < 0) ? mouse.x : mouse.startX;
                } else if (shouldMoveLeft()) {
                    nextWidth = width - (mouse.x - left);
                    if (nextWidth > 0) {
                        width = nextWidth;
                        left = mouse.x;
                    }
                }

                if (isInitialSelection()) {
                    top = (mouse.y - mouse.startY < 0) ? mouse.y : mouse.startY;
                } else if (shouldMoveTop()) {
                    nextHeight = height - (mouse.y - top);
                    if (nextHeight > 0) {
                        top = mouse.y;
                        height = nextHeight;
                    }
                }

                if (shouldMoveWidth())
                    width = Math.abs(mouse.x - mouse.startX);

                if (shouldMoveHeight())
                    height = Math.abs(mouse.y - mouse.startY);

                element.style.width = width + 'px';
                element.style.height = height + 'px';
                element.style.left = left + 'px';
                element.style.top = top + 'px';

            }

            canvas.onclick = function (e) {
                if (element !== null) {

                    if (!isInitialSelection()) {
                        if (!isStartEdit) {
                            isStartEdit = true
                            return
                        } else {
                            isStartEdit = false;
                        }
                    }
                    selectedRegion.style.display = 'block';
                    element.appendChild(selectedRegion);
                    element = null;
                    canvas.style.cursor = "default";
                    console.log("finsihed.");
                    onDone(left, top, width, height);
                } else {
                    if (regionPopup.style.display == 'block')
                        return;
                    console.log("begun.");
                    mouse.startX = mouse.x;
                    mouse.startY = mouse.y;
                    element = document.createElement('div');
                    element.className = 'rectangle'
                    element.style.left = mouse.x + 'px';
                    element.style.top = mouse.y + 'px';
                    canvas.appendChild(element);
                    canvas.style.cursor = "crosshair";
                }
            }
        }
    </script>
}
